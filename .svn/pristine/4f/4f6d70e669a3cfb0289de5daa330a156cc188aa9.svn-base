import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

Map<String, List<PerformanceLot>> lotsBySector = new HashMap<String, List<PerformanceLot>>();
Map<String, List<PerformanceLot>> lotsByCountry = new HashMap<String, List<PerformanceLot>>();
Map<String, Float> weightPerSector = new HashMap<String, Float>();
Map<String, Float> weightPerCountry = new HashMap<String, Float>();
String[] lines;
float minReturn = 0;
float maxReturn = 0;
int xloc;
float saturationFactor;
float brightnessFactor; 
PFont font;
final int PANELWIDTH = 500;
final int PANELHEIGHT = 200;
final int PRINTSCREENHEIGHT = 60;
final int BUTTONPANEHEIGHT = 50;
//Processing apparently does not yet support enums. We will use 1 for the 
//category when we want a sector, 2 for country.
int category = 1;

void setup() 
{
  size(PANELWIDTH, PANELHEIGHT + PRINTSCREENHEIGHT + BUTTONPANEHEIGHT);
  colorMode(HSB, 360, 100, 100);
  weightPerSector = new HashMap();
  weightPerCountry = new HashMap();
  font = loadFont("AppleBraille-12.vlw");
  textFont(font);
  textAlign(LEFT, 200);
  
  lines = loadStrings("fakeportfolio1.txt");
  for (int i = 0; i < lines.length; i++)
  {
    String[] data = split(lines[i], TAB);
    if (data.length == 6)
    {
      setupLot(data);
    }
  }
  
  if (maxReturn != 0) 
    saturationFactor = 100/maxReturn;
  else if (minReturn != 0)
    saturationFactor = -100/minReturn;
  else
    saturationFactor = 0; //s = abs(ret) * sf
    
  if (minReturn != 0)
    brightnessFactor = 100/minReturn;
  else
    brightnessFactor = 0; //b = ret > 0 ? 100 : 100 - bf*ret
   
  setInfoByCategory(1);
  setInfoByCategory(2);
}

void setInfoByCategory(int categoryToSet)
{
  int hueVal = 360;
  Map<String, Float> smallCategoryWeights = new HashMap<String, Float>();
  Map<String, Integer> smallCategoryHues = new HashMap<String, Integer>();
  int numCategories = categoryToSet==1 ? weightPerSector.size() : weightPerCountry.size();
  int colorIncrement = 360/numCategories;
  xloc = 0;
  
  for (String category : categoryToSet == 1 ? weightPerSector.keySet() : weightPerCountry.keySet())
  {
    if ((categoryToSet == 1 && weightPerSector.get(category) < .1) || 
    (categoryToSet == 2 && weightPerCountry.get(category) < .1))
    {
      smallCategoryWeights.put(category, categoryToSet == 1 ? weightPerSector.get(category) : weightPerCountry.get(category));
      smallCategoryHues.put(category, hueVal);
    }
    else
    {
      List<PerformanceLot> lots = categoryToSet == 1 ? lotsBySector.get(category) : lotsByCountry.get(category);
      float weight = categoryToSet == 1 ? weightPerSector.get(category) * PANELWIDTH : weightPerCountry.get(category) * PANELWIDTH;
      int categoryxside = (int)weight;
      setLotLocationAndColor(lots, categoryxside, weight, hueVal, 0, PANELHEIGHT, categoryToSet, true);
    }
    hueVal -= colorIncrement;
  }
  if (!smallCategoryWeights.isEmpty())
    setSmallCategoryInfo(smallCategoryWeights, smallCategoryHues, categoryToSet);
}

void draw() 
{
  background(0);
  for (List<PerformanceLot> lots : category == 1 ? lotsBySector.values() : lotsByCountry.values())
    drawLots(lots);
  drawButtons();
  for (List<PerformanceLot> lotList : category == 1 ? lotsBySector.values() : lotsByCountry.values())  
    for (PerformanceLot lot : lotList)  
      if ((category == 1 && lot.overSectorLot()) || category == 2 && lot.overCountryLot())
      {
        text(lot.cusip, 0, PANELHEIGHT+10);
        text(lot.description, 0, PANELHEIGHT+20);
        text(lot.sector, 0, PANELHEIGHT+30);
        text(lot.country, 0, PANELHEIGHT+40);
        text("Return: " + lot.ret, 0, PANELHEIGHT+50);
        text("Weight: " + lot.weight, 0, PANELHEIGHT+60);
      }
}

private void setupLot(String[] data)
{
  PerformanceLot lot = new PerformanceLot(data);
  if (lotsBySector.containsKey(lot.sector))
  {
    lotsBySector.get(lot.sector).add(lot);
    float newWeight = weightPerSector.get(lot.sector) + lot.weight;
    weightPerSector.put(lot.sector, newWeight);
  }
  else
  {
    List<PerformanceLot> lots = new ArrayList();
    lots.add(lot);
    lotsBySector.put(lot.sector, lots);
    weightPerSector.put(lot.sector, lot.weight);
  }
  if (lotsByCountry.containsKey(lot.country))
  {
    lotsByCountry.get(lot.country).add(lot);
    float newWeight = weightPerCountry.get(lot.country) + lot.weight;
    weightPerCountry.put(lot.country, newWeight);
  }
  else
  {
    List<PerformanceLot> lots = new ArrayList();
    lots.add(lot);
    lotsByCountry.put(lot.country, lots);
    weightPerCountry.put(lot.country, lot.weight);
  }
  
  if (lot.ret < minReturn)
    minReturn = lot.ret;
  else if (lot.ret > maxReturn)
    maxReturn = lot.ret;
}

private void drawLots(List<PerformanceLot> lots)
{
  for (PerformanceLot lot : lots)
  {
    if (category == 1)
    {
      stroke(lot.sectorHueVal, 100, 100);
      fill(lot.sectorHueVal, lot.satVal, lot.brightVal);
      rect(lot.sectorX, lot.sectorY, lot.sectorW, lot.sectorH);
    }
    else
    {
      stroke(lot.countryHueVal, 100, 100);
      fill(lot.countryHueVal, lot.satVal, lot.brightVal);
      rect(lot.countryX, lot.countryY, lot.countryW, lot.countryH);
    }
  }
}

private void drawButtons()
{
  stroke(0, 100, 100);
  fill(0, 80, 100);
  rect(0, PANELHEIGHT + PRINTSCREENHEIGHT, 
    PANELWIDTH/2, PANELHEIGHT + PRINTSCREENHEIGHT + BUTTONPANEHEIGHT);
  textAlign(CENTER);
  fill(0, 100, 0);
  text("SECTOR", PANELWIDTH/4, PANELHEIGHT + PRINTSCREENHEIGHT + 30);
  
  stroke(180, 100, 100);
  fill(180, 80, 100);
  rect(PANELWIDTH/2, PANELHEIGHT + PRINTSCREENHEIGHT,
    PANELWIDTH, PANELHEIGHT + PRINTSCREENHEIGHT + BUTTONPANEHEIGHT);
  fill(0, 100, 0);
  text("COUNTRY", PANELWIDTH*3/4, PANELHEIGHT + PRINTSCREENHEIGHT + 30);
    
  textAlign(LEFT);
  fill(255);
}

private void drawPopup(PerformanceLot lot)
{
  fill(0);
  rect(lot.popx, lot.popy, lot.popw, lot.poph);
}

private void setLotLocationAndColor(List<PerformanceLot> lots, int categoryxside, float weight, int hueVal, int ystart, int ytotal, int categoryToSet, boolean incrementx)
{ 
  if (weight > 100)
  {
    List<PerformanceLot> newColumnLots = new ArrayList();
    List<PerformanceLot> remainingLots = new ArrayList();
    float newColumnWeight = 0;
    for (PerformanceLot lot : lots)
    {
      newColumnLots.add(lot);
      newColumnWeight += lot.weight * PANELWIDTH;
      if (newColumnWeight >= 50) 
        break;
    }
    for (PerformanceLot lot : lots)
    {
      if (!newColumnLots.contains(lot))
        remainingLots.add(lot);
    }
    weight -= newColumnWeight;
    int newColumnXSide = int(newColumnWeight);
    setLotLocationAndColor(newColumnLots, newColumnXSide, newColumnWeight, hueVal, ystart, ytotal, categoryToSet, true);
    setLotLocationAndColor(remainingLots, categoryxside - newColumnXSide, weight, hueVal, ystart, ytotal, categoryToSet, true);
    return;
  }
  
  for (PerformanceLot lot : lots)
  {
    float lotWeight = lot.weight * PANELWIDTH * ytotal / weight;  
    int lotyside = (int)lotWeight;
    float bright = 100;
    if (lot.ret < 0)
      bright -= brightnessFactor * lot.ret;
    
    if (categoryToSet == 1)
    {
      lot.setSectorHue(hueVal);
      lot.setSectorX(xloc);
      lot.setSectorY(ystart);
      lot.setSectorWidth(categoryxside);
      lot.setSectorHeight(lotyside);
    }
    else
    {
      lot.setCountryHue(hueVal);
      lot.setCountryX(xloc);
      lot.setCountryY(ystart);
      lot.setCountryWidth(categoryxside);
      lot.setCountryHeight(lotyside);
    }
    lot.setSat(saturationFactor * abs(lot.ret) * 1.5);
    lot.setBright(bright);
    
    ystart += lotyside;
  }
  if (incrementx)
    xloc += categoryxside;
}
private void setSmallCategoryInfo(Map<String, Float> weights, Map<String, Integer> hues, int categoryToSet)
{
  float totalWeight = 0; 
  for (float weight : weights.values())
    totalWeight += weight;
  if (totalWeight > .3) //divide up small lots into multiple columns
  {
    splitOutNewColumn(weights, hues, categoryToSet);
    setSmallCategoryInfo(weights, hues, categoryToSet);
  }
  else
  {
    setNewColumnInfo(weights, hues, totalWeight, categoryToSet);
  }
}

private void splitOutNewColumn(Map<String, Float> weights, Map<String, Integer> hues, int categoryToSet)
{
  float columnTotalWeight = 0;
  Map<String, Float> columnWeights = new HashMap<String, Float>();
  Map<String, Integer> columnHues = new HashMap<String, Integer>();
  Set<String> addedCategories = new HashSet();
  for (String category : weights.keySet())
  {
    columnTotalWeight += weights.get(category);
    columnWeights.put(category, weights.get(category));
    columnHues.put(category, hues.get(category));
    addedCategories.add(category);
    if (columnTotalWeight >= .15)
    {
      setNewColumnInfo(columnWeights, columnHues, columnTotalWeight, categoryToSet);
      break;
    }
  }
  for (String category : addedCategories)
  {
    weights.remove(category);
    hues.remove(category);
  }
}

private void setNewColumnInfo(Map<String, Float> weights, Map<String, Integer> hues, float totalWeight, int categoryToSet)
{
  int yloc = 0;
  int xside = int(totalWeight * PANELWIDTH);
  for (String category : weights.keySet())
  {
    List<PerformanceLot> lots = categoryToSet == 1 ? lotsBySector.get(category) : lotsByCountry.get(category);
    int yside = int(weights.get(category) * float(PANELHEIGHT) / totalWeight);
    float weight = weights.get(category) * xside / totalWeight;
    setLotLocationAndColor(lots, xside, weight, hues.get(category), yloc, yside, categoryToSet, false);
    yloc += yside;
  }
  xloc += xside;
}

void mousePressed()
{
  if (mouseX > 0 && mouseX < PANELWIDTH/2 && 
    mouseY > PANELHEIGHT + PRINTSCREENHEIGHT && 
    mouseY < PANELHEIGHT + PRINTSCREENHEIGHT + BUTTONPANEHEIGHT
    && category == 2)
  {
    category = 1;
  }
  else if (mouseX > PANELWIDTH/2 && mouseX < PANELWIDTH && 
    mouseY > PANELHEIGHT + PRINTSCREENHEIGHT && 
    mouseY < PANELHEIGHT + PRINTSCREENHEIGHT + BUTTONPANEHEIGHT
    && category == 1)
  {
    category = 2;
  }
}

